#include <stdio.h>
#include <stdlib.h>
#include <unistd.h> // sleep
#include <time.h> // time function
#include <conio.h> // getch
#include <windows.h> // janela da console
#include <locale.h> // setlocale

char jogador[20]; // nome do jogador

// Key code
enum
{
    KEY_ESC     = 27,
    KEY_ENTER   = 13,
    ARROW_UP    = 256 + 72,
    ARROW_DOWN  = 256 + 80,
    ARROW_LEFT  = 256 + 75,
    ARROW_RIGHT = 256 + 77
};

char menus[2][1000] = {
    "Jogar cobrinha",
    "Ver recordes"
};

static int get_code(void);
void jogarCobrinha(int nivel);
void verRecordes(void);
void generateMenu(int choice);
void mostrarGameOver(int pontos);
void irColunaLinha(int coluna, int linha);
void carregarJogo(void);
void mostrarLimitesMatriz(void);

void generateMenu(int choice) {
    system("cls"); // Limpa antes de mostrar o título e o menu
    
    printf("\n\t\t   SNAKE\n\n"); // Título "SNAKE" no topo, centralizado

    for (int count = 0; count < 2; count++) {
        if (choice == count) {
            printf("\t[*] %s\n", menus[count]);
        } else {
            printf("\t[ ] %s\n", menus[count]);
        }
    }

    SMALL_RECT windowSize = {0, 0, 39, 12}; // ajustar tamanho da janela
    SetConsoleWindowInfo(GetStdHandle(STD_OUTPUT_HANDLE), TRUE, &windowSize);

    int ch;
    while ((ch = get_code()) != KEY_ESC) {
        switch (ch) {
            case ARROW_UP:
                system("cls");
                generateMenu(choice > 0 ? choice - 1 : 1); // Move para cima no menu
                return;
            case ARROW_DOWN:
                system("cls");
                generateMenu(choice < 1 ? choice + 1 : 0); // Move para baixo no menu
                return;
            case KEY_ENTER:
                switch (choice) {
                    case 0:
                        jogarCobrinha(1);
                        break;
                    case 1:
                        verRecordes();
                        break;
                }
                return;
        }
    }
}

void irColunaLinha(int coluna, int linha) {
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), (COORD) {coluna, linha});
}

void carregarJogo() {
    system("cls");
    printf("Nome do jogador?\n");
    scanf("%[^\n]s", jogador);
    system("cls");
    printf("Aguarde o jogo ser carregado...\n");
    char load[11] = "carregando";
    for (int i = 0; i < 11; ++i) {
        printf("%c ", load[i]);
        Sleep(((rand() % 100) + 350));
    }
    printf("...\nCarregamento concluido\n");
    sleep(1);
    printf("Iniciando...");
    system("cls");
}

void mostrarLimitesMatriz(void) {
    system("cls");
    for (int i = 0; i < 12; ++i) {
        for (int j = 0; j < 39; ++j) {
            if ((j == 0) || (i == 0) || (i == 11) || (j == 38)) {
                printf("+");
            } else {
                printf(" ");
            }
        }
        printf("\n");
    }
}

void mostrarGameOver(int pontos) {
    FILE *arquivo = fopen("recordes.txt", "a"); // append

    if (arquivo != NULL) {
        fprintf(arquivo, "\n %03dP - %s", pontos, jogador);
        fclose(arquivo);
    } else {
        printf("Nenhum recorde registrado!\n");
    }

    Sleep(600);
    mostrarLimitesMatriz();
    irColunaLinha(4, 4);
    printf("==============================");
    irColunaLinha(10, 5);
    printf("G A M E  O V E R");
    irColunaLinha(4, 6);
    printf("==============================");
    getch();
    system("cls");
    generateMenu(0);
}

void jogarCobrinha(int nivel) {
    int cobraPosicaoX[38*13] = {}; // posição inicial da cobra (X)
    int cobraPosicaoY[13*38] = {}; // posição inicial da cobra (Y)
    int PontoPosicaoX, PontoPosicaoY; // posição do ponto
    int i, tamanhoCobra = 3; // tamanho inicial da cobra
    int pontos = 1; // pontuação inicial
    int ch; // código da tecla pressionada
    int velocidade = 300;  // velocidade inicial
    char teclou;

    carregarJogo();
    mostrarLimitesMatriz();

    // Gerar a posição do primeiro ponto
    PontoPosicaoX = (rand() % 37) + 1;
    PontoPosicaoY = (rand() % 10) + 1;

    // Mostrar informações
    irColunaLinha(0, 12);
    printf("Pressione uma das setas para iniciar...");

    // Gerar a posição inicial da cobra aleatoriamente
    cobraPosicaoX[0] = (rand() % 37) + 1;
    cobraPosicaoY[0] = (rand() % 10) + 1;
    irColunaLinha(cobraPosicaoX[0], cobraPosicaoY[0]);
    printf("O"); 

    ch = get_code(); // Aguardar uma tecla para iniciar
    while (ch != KEY_ESC) {
        // Limpar instruções
        for (int i = 0; i < 37; ++i) {
            irColunaLinha(i, 12);
            printf(" ");
        }

        // Verificar se a cobra bateu na parede
        if ((cobraPosicaoY[0] == 0) || (cobraPosicaoY[0] == 12) ||
            (cobraPosicaoX[0] == 0) || (cobraPosicaoX[0] == 38)) {
            mostrarGameOver(pontos);
        }

        // Movimentar a cobra
        for (i = tamanhoCobra; i > 0; i--) {
            cobraPosicaoX[i] = cobraPosicaoX[i-1];
            cobraPosicaoY[i] = cobraPosicaoY[i-1];
        }

        // Apagar rastro
        irColunaLinha(cobraPosicaoX[tamanhoCobra], cobraPosicaoY[tamanhoCobra]);
        printf(" ");

        // Detectar tecla pressionada
        if (kbhit()) {
            ch = get_code();
        }

        // Movimentar cobra com base na tecla pressionada
        switch ((int) ch) {
            case ARROW_UP:
                cobraPosicaoY[0]--;
                break;
            case ARROW_DOWN:
                cobraPosicaoY[0]++;
                break;
            case ARROW_LEFT:
                cobraPosicaoX[0]--;
                break;
            case ARROW_RIGHT:
                cobraPosicaoX[0]++;
                break;
            default:
                ch = get_code();
                break;
        }

        // Verificar se a cobra comeu o ponto
        if (PontoPosicaoX == cobraPosicaoX[0] && PontoPosicaoY == cobraPosicaoY[0]) {
            tamanhoCobra++; // aumentar tamanho
            pontos++; // aumentar pontos
            if (velocidade > 50) {
                velocidade -= 10; // aumenta a velocidade
            }

            // Gerar novo ponto
            PontoPosicaoX = (rand() % 37) + 1;
            PontoPosicaoY = (rand() % 10) + 1;
        }

        // Exibir a cabeça da cobra
        irColunaLinha(cobraPosicaoX[0], cobraPosicaoY[0]);
        printf("O"); 

        // Atualizar o placar
        irColunaLinha(0, 12);
        printf("Pontos: %d - %s", pontos, jogador);

        Sleep(velocidade);

        // Verificar colisão com o corpo
        for (i = 1; i < tamanhoCobra; i++) {
            if (cobraPosicaoX[0] == cobraPosicaoX[i] && cobraPosicaoY[0] == cobraPosicaoY[i]) {
                mostrarGameOver(pontos);
            }
        }

        // Exibir novo ponto
        irColunaLinha(PontoPosicaoX, PontoPosicaoY);
        printf("c");
    }

    getch();
    system("cls");
    generateMenu(0);
}

void verRecordes(void) {
    system("cls");
    char texto_str[20];
    FILE *arquivo = fopen("recordes.txt", "r");

    if (arquivo != NULL) {
        printf("Ranking de recordes:\n\n");
        while (fgets(texto_str, 20, arquivo) != NULL) {
            printf("%s", texto_str);
        }
        fclose(arquivo);
    } else {
        printf("Nenhum recorde registrado!\n");
    }

    printf("\n\n");
    getch();
    system("cls");
    generateMenu(0);
}

static int get_code(void) {
    int ch = getch();

    if (ch == 0 || ch == 224) {
        ch = 256 + getch();
    }
    return ch;
}

int main(void) {
    setlocale(LC_ALL, "Portuguese");
    srand(time(NULL));
    generateMenu(0);
    return 0;
}
